{"name":"Elk","tagline":"API client for 46elks messaging service","body":"# Elk - 46elks API-client\r\n\r\nRuby client for 46elks \"Voice, SMS & MMS\" service. http://46elks.com/\r\nAt the moment the API only supports sending SMS messages.\r\n\r\n## Requirements\r\n\r\n* API account at 46elks.com\r\n\r\n## Install\r\n\r\nInstall via RubyGems\r\n\r\n    gem install elk\r\n\r\n## Source and development\r\n\r\nThe source for Elk is available on Github:\r\n\r\n    https://github.com/jage/elk\r\n\r\nelk uses rspec and webmock for testing, do a `bundle install` for all the development requirements.\r\n\r\n## Usage\r\n\r\nelk can be used to allocate a phone numbers, manage the numbers and send/recieve messages through these numbers.\r\n\r\n### Authentication and configuration\r\n\r\nFirst thing when using elk is to set the authentication parameters\r\n\r\n    require 'elk'\r\n\r\n    Elk.configure do |config|\r\n      config.username = 'USERNAME'\r\n      config.password = 'PASSWORD'\r\n    end\r\n\r\n### Numbers\r\n\r\nTo be able to send and recieve messages, a number is needed. Several numbers can be allocated.\r\n\r\n    number = Elk::Number.allocate(:sms_url => 'http://myservice.se/callback/newsms.php', :country => 'se')\r\n    # => #<Elk::Number:0x0000010282aa70 @country=\"se\", @sms_url=\"http://myservice.se/callback/newsms.php\", @status=\"yes\", @number_id=\"n03e7db70cc06c1ff85e09a2b3f86dd62\", @number=\"+46766861034\", @capabilities=[:sms], @loaded_at=2011-07-17 15:23:55 +0200>\r\n\r\nGet all numbers\r\n\r\n    numbers = Elk::Number.all\r\n    # => [#<Elk::Number ...>, #<Elk::Number ...>]\r\n\r\nChange number settings\r\n\r\n    number.sms_url = 'http://myservice.se/callback/newsms.php'\r\n    number.save\r\n    # => true\r\n\r\nDeallocate a number.\r\nBeware that there is no way to get your number back once it has been deallocated!\r\n\r\n    number.deallocate!\r\n    # => true\r\n    number.status\r\n    # => :deallocated\r\n\r\n### SMS\r\n\r\nSend SMS. Messages can be sent from one of the allocated numbers or an arbitrary alphanumeric string of at most 11 characters.\r\n\r\n    Elk::SMS.send(:from => 'MyService', :to => '+46704508449', :message => 'Your order #171 has now been sent!')\r\n    # => #<Elk::SMS:0x0000010179d7e8 @from=\"MyService\", @to=\"+46704508449\", @message=\"Your order #171 has now been sent!\", @message_id=\"sdc39a7926d37159b6985283e32f43251\", @created_at=2011-07-17 16:21:13 +0200, @loaded_at=2011-07-17 16:21:13 +0200>\r\n\r\nReceiving SMS does not require Elk, but should be of interest anyway.\r\nExample with Sinatra:\r\n\r\n    post '/receive' do\r\n      if request.params['message'] == 'Hello'\r\n        # Sends a return SMS with message \"world!\"\r\n        \"world!\"\r\n      end\r\n    end\r\n\r\nSMS history\r\n\r\n    Elk::SMS.all\r\n    # => [#<Elk::SMS ...>, #<Elk::SMS ...>, <Elk::SMS ...>]\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2011 Johan Eckerstr√∂m. See LICENSE for details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}